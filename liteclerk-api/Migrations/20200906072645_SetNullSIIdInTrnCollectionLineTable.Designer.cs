// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using liteclerk_api.DBContext;

namespace liteclerk_api.Migrations
{
    [DbContext(typeof(LiteclerkDBContext))]
    [Migration("20200906072645_SetNullSIIdInTrnCollectionLineTable")]
    partial class SetNullSIIdInTrnCollectionLineTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCashFlow")
                        .IsRequired()
                        .HasColumnName("AccountCashFlow")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCashFlowCode")
                        .IsRequired()
                        .HasColumnName("AccountCashFlowCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCashFlow");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCategory")
                        .IsRequired()
                        .HasColumnName("AccountCategory")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCategoryCode")
                        .IsRequired()
                        .HasColumnName("AccountCategoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCategory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("Account")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("AccountCashFlowId")
                        .HasColumnName("AccountCashFlowId")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnName("AccountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnName("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCashFlowId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategoryId")
                        .HasColumnName("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnName("AccountType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasColumnName("AccountTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleAccountGroup")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleAccountGroupCode")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroupCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AssetAccountId")
                        .HasColumnName("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticleAccountGroup");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("CreditLimit")
                        .HasColumnName("CreditLimit")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnName("Customer")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ReceivableAccountId")
                        .HasColumnName("ReceivableAccountId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("TermId");

                    b.ToTable("MstArticleCustomer");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("Article")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnName("ArticleCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ArticleTypeId")
                        .HasColumnName("ArticleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticle");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleAccountGroupId")
                        .HasColumnName("ArticleAccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnName("BarCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInventory")
                        .HasColumnName("IsInventory")
                        .HasColumnType("bit");

                    b.Property<string>("Kitting")
                        .IsRequired()
                        .HasColumnName("Kitting")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("RRVATId")
                        .HasColumnName("RRVATId")
                        .HasColumnType("int");

                    b.Property<int>("SIVATId")
                        .HasColumnName("SIVATId")
                        .HasColumnType("int");

                    b.Property<string>("SKUCode")
                        .IsRequired()
                        .HasColumnName("SKUCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleAccountGroupId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("RRVATId");

                    b.HasIndex("SIVATId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WTAXId");

                    b.ToTable("MstArticleItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("InventoryCode")
                        .IsRequired()
                        .HasColumnName("InventoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.ToTable("MstArticleItemInventory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemPriceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("PriceDescription")
                        .IsRequired()
                        .HasColumnName("PriceDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("MstArticleItemPrice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Multiplier")
                        .HasColumnName("Multiplier")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UnitId");

                    b.ToTable("MstArticleItemUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleType")
                        .IsRequired()
                        .HasColumnName("ArticleType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MstArticleType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCodeTableDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("Category")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CodeValue")
                        .IsRequired()
                        .HasColumnName("CodeValue")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MstCodeTable");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnName("Branch")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnName("BranchCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstCompanyBranch");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnName("Company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnName("CompanyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CostMethod")
                        .IsRequired()
                        .HasColumnName("CostMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCompany");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnName("Currency")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCurrency");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstDiscountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnName("Discount")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnName("DiscountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstDiscount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobDepartmentDBset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobDepartment")
                        .IsRequired()
                        .HasColumnName("JobDepartment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobDepartmentCode")
                        .IsRequired()
                        .HasColumnName("JobDepartmentCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeAttachmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentCode")
                        .IsRequired()
                        .HasColumnName("AttachmentCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnName("AttachmentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeAttachment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnName("JobType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobTypeCode")
                        .IsRequired()
                        .HasColumnName("JobTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalNumberOfDays")
                        .HasColumnName("TotalNumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDepartmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobDepartmentId")
                        .HasColumnName("JobDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("JobDepartmentId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeInformationDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InformationCode")
                        .IsRequired()
                        .HasColumnName("InformationCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InformationGroup")
                        .IsRequired()
                        .HasColumnName("InformationGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeInformation");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstPayTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasColumnName("PayType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PayTypeCode")
                        .IsRequired()
                        .HasColumnName("PayTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstPayType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTaxDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnName("TaxCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxDescription")
                        .IsRequired()
                        .HasColumnName("TaxDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("TaxRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTax");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnName("Term")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TermCode")
                        .IsRequired()
                        .HasColumnName("TermCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTerm");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnName("Unit")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnName("UnitCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnName("Fullname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstUser");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CIDate")
                        .HasColumnName("CIDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CINumber")
                        .IsRequired()
                        .HasColumnName("CINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnCollection");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionLineDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnName("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CIId")
                        .HasColumnName("CIId")
                        .HasColumnType("int");

                    b.Property<string>("CheckBank")
                        .IsRequired()
                        .HasColumnName("CheckBank")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("CheckDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckNumber")
                        .IsRequired()
                        .HasColumnName("CheckNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsClear")
                        .HasColumnName("IsClear")
                        .HasColumnType("bit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayTypeId")
                        .HasColumnName("PayTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CIId");

                    b.HasIndex("PayTypeId");

                    b.HasIndex("SIId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnCollectionLine");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderAttachmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentCode")
                        .IsRequired()
                        .HasColumnName("AttachmentCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnName("AttachmentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentURL")
                        .IsRequired()
                        .HasColumnName("AttachmentURL")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("JOId");

                    b.ToTable("TrnJobOrderAttachment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnName("DateScheduled")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemJobTypeId")
                        .HasColumnName("ItemJobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JODate")
                        .HasColumnName("JODate")
                        .HasColumnType("datetime");

                    b.Property<string>("JONumber")
                        .IsRequired()
                        .HasColumnName("JONumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int?>("SIItemId")
                        .HasColumnName("SIItemId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemJobTypeId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SIId");

                    b.HasIndex("SIItemId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnJobOrder");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDepartmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<int>("JobDepartmentId")
                        .HasColumnName("JobDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StatusByUserId")
                        .HasColumnName("StatusByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusUpdatedDateTime")
                        .HasColumnName("StatusUpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("JOId");

                    b.HasIndex("JobDepartmentId");

                    b.HasIndex("StatusByUserId");

                    b.ToTable("TrnJobOrderDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderInformationDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InformationByUserId")
                        .HasColumnName("InformationByUserId")
                        .HasColumnType("int");

                    b.Property<string>("InformationCode")
                        .IsRequired()
                        .HasColumnName("InformationCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InformationGroup")
                        .IsRequired()
                        .HasColumnName("InformationGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("InformationUpdatedDateTime")
                        .HasColumnName("InformationUpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("InformationByUserId");

                    b.HasIndex("JOId");

                    b.ToTable("TrnJobOrderInformation");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdjustmentAmount")
                        .HasColumnName("AdjustmentAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnName("BalanceAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PaidAmount")
                        .HasColumnName("PaidAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SIDate")
                        .HasColumnName("SIDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SINumber")
                        .IsRequired()
                        .HasColumnName("SINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SoldByUserId")
                        .HasColumnName("SoldByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SoldByUserId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnSalesInvoice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseNetPrice")
                        .HasColumnName("BaseNetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnName("DiscountAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("DiscountId")
                        .HasColumnName("DiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemJobTypeId")
                        .HasColumnName("ItemJobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineTimeStamp")
                        .HasColumnName("LineTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<decimal>("NetPrice")
                        .HasColumnName("NetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("VATId")
                        .HasColumnName("VATId")
                        .HasColumnType("int");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("ItemJobTypeId");

                    b.HasIndex("SIId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VATId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnSalesInvoiceItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccountCashFlows_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccountCashFlows_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccountCategories_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccountCategories_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCashFlowDBSet", "MstAccountCashFlow_AccountCashFlowId")
                        .WithMany("MstAccounts_AccountCashFlowId")
                        .HasForeignKey("AccountCashFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountTypeDBSet", "MstAccountType_AccountTypeId")
                        .WithMany("MstAccounts_AccountTypeId")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccounts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccounts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCategoryDBSet", "MstAccountCategory_AccountCategoryId")
                        .WithMany("MstAccountTypes_AccountCategoryId")
                        .HasForeignKey("AccountCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccountTypes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccountTypes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccountId")
                        .WithMany("MstArticleAccountGroups_AssetAccountId")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccountId")
                        .WithMany("MstArticleAccountGroups_CostAccountId")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstArticleAccountGroups_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccountId")
                        .WithMany("MstArticleAccountGroups_ExpenseAccountId")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccountId")
                        .WithMany("MstArticleAccountGroups_SalesAccountId")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstArticleAccountGroups_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleCustomers_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ReceivableAccountId")
                        .WithMany("MstArticleCustomers_ReceivableAccountId")
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("MstArticleCustomers_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleTypeDBSet", "MstArticleType_ArticleTypeId")
                        .WithMany("MstArticles_ArticleTypeId")
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstArticles_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstArticles_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", "MstArticleAccountGroup_ArticleAccountGroupId")
                        .WithMany("MstArticleItems_ArticleAccountGroupId")
                        .HasForeignKey("ArticleAccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItems_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccountId")
                        .WithMany("MstArticleItems_AssetAccountId")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccountId")
                        .WithMany("MstArticleItems_CostAccountId")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccountId")
                        .WithMany("MstArticleItems_ExpenseAccountId")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_RRVATId")
                        .WithMany("MstArticleItems_RRVATId")
                        .HasForeignKey("RRVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_SIVATId")
                        .WithMany("MstArticleItems_SIVATId")
                        .HasForeignKey("SIVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccountId")
                        .WithMany("MstArticleItems_SalesAccountId")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("MstArticleItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("MstArticleItems_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemInventories_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("MstArticleItemInventories_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemPriceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemPrices_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemUnits_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("MstArticleItemUnits_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_CompanyId")
                        .WithMany("MstCompanyBranches_CompanyId")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstCompanies_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("MstCompanies_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstCompanies_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstCurrencies_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstCurrencies_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstDiscountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstDiscounts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstDiscounts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobDepartmentDBset", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstJobDepartments_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstJobDepartments_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeAttachmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobTypeId")
                        .WithMany("MstJobTypeAttachments_JobTypeId")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstJobTypes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstJobTypes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDepartmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobDepartmentDBset", "MstJobDepartment_JobDepartmentId")
                        .WithMany("MstJobTypeDepartments_JobDepartmentId")
                        .HasForeignKey("JobDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobTypeId")
                        .WithMany("MstJobTypeDepartments_JobTypeId")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeInformationDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobTypeId")
                        .WithMany("MstJobTypeInformations_JobTypeId")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstPayTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("MstPayTypes_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstPayTypes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstPayTypes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTaxDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstTaxes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstTaxes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstTerms_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstTerms_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstUnits_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstUnits_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("MstUsers_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_CompanyId")
                        .WithMany("MstUsers_CompanyId")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnCollections_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnCollections_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnCollections_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnCollections_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnCollections_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnCollections_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnCollections_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnCollections_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionLineDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnCollectionLines_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnCollectionLines_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_BankId")
                        .WithMany("TrnCollectionLines_BankId")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnCollectionLines_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnCollectionDBSet", "TrnCollection_CIId")
                        .WithMany("TrnCollectionLines_CIId")
                        .HasForeignKey("CIId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstPayTypeDBSet", "MstPayType_PayTypeId")
                        .WithMany("TrnCollectionLines_PayTypeId")
                        .HasForeignKey("PayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnCollectionLines_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnCollectionLines_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderAttachmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnJobOrderAttachments_JOId")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnJobOrders_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnJobOrders_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnJobOrders_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnJobOrders_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnJobOrders_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnJobOrders_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnJobOrders_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_ItemJobTypeId")
                        .WithMany("TrnJobOrders_ItemJobTypeId")
                        .HasForeignKey("ItemJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnJobOrders_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnJobOrders_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", "TrnSalesInvoiceItem_SIItemId")
                        .WithMany("TrnJobOrders_SIIdItem")
                        .HasForeignKey("SIItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnJobOrders_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnJobOrders_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDepartmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnJobOrderDepartments_JOId")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobDepartmentDBset", "MstJobDepartment_JobDepartmentId")
                        .WithMany("TrnJobOrderDepartments_JobDepartmentId")
                        .HasForeignKey("JobDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_StatusByUserId")
                        .WithMany("TrnJobOrderDepartments_StatusByUserId")
                        .HasForeignKey("StatusByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderInformationDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_InformationByUserId")
                        .WithMany("TrnJobOrderInformations_InformationByUserId")
                        .HasForeignKey("InformationByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnJobOrderInformations_JOId")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnSalesInvoices_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnSalesInvoices_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnSalesInvoices_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnSalesInvoices_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnSalesInvoices_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnSalesInvoices_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnSalesInvoices_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_SoldByUserId")
                        .WithMany("TrnSalesInvoices_SoldByUserId")
                        .HasForeignKey("SoldByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("TrnSalesInvoices_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnSalesInvoices_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnSalesInvoiceItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstDiscountDBSet", "MstDiscount_DiscountId")
                        .WithMany("TrnSalesInvoiceItems_DiscountId")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnSalesInvoiceItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventoryId")
                        .WithMany("TrnSalesInvoiceItems_ItemInventoryId")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_ItemJobTypeId")
                        .WithMany("TrnSalesInvoiceItems_ItemJobTypeId")
                        .HasForeignKey("ItemJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnSalesInvoiceItems_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnSalesInvoiceItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_VATId")
                        .WithMany("TrnSalesInvoiceItems_VATId")
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnSalesInvoiceItems_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
