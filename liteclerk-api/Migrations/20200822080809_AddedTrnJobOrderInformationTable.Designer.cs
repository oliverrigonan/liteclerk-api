// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using liteclerk_api.DBContext;

namespace liteclerk_api.Migrations
{
    [DbContext(typeof(LiteclerkDBContext))]
    [Migration("20200822080809_AddedTrnJobOrderInformationTable")]
    partial class AddedTrnJobOrderInformationTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCashFlow")
                        .IsRequired()
                        .HasColumnName("AccountCashFlow")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCashFlowCode")
                        .IsRequired()
                        .HasColumnName("AccountCashFlowCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCashFlow");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCategory")
                        .IsRequired()
                        .HasColumnName("AccountCategory")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCategoryCode")
                        .IsRequired()
                        .HasColumnName("AccountCategoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCategory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("Account")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("AccountCashFlowId")
                        .HasColumnName("AccountCashFlowId")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnName("AccountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnName("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCashFlowId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategoryId")
                        .HasColumnName("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnName("AccountType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasColumnName("AccountTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleAccountGroup")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleAccountGroupCode")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroupCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AssetAccountId")
                        .HasColumnName("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticleAccountGroup");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("CreditLimit")
                        .HasColumnName("CreditLimit")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnName("Customer")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ReceivableAccountId")
                        .HasColumnName("ReceivableAccountId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("TermId");

                    b.ToTable("MstArticleCustomer");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("Article")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnName("ArticleCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ArticleTypeId")
                        .HasColumnName("ArticleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticle");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleAccountGroupId")
                        .HasColumnName("ArticleAccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnName("BarCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInventory")
                        .HasColumnName("IsInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJob")
                        .HasColumnName("IsJob")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("RRVATId")
                        .HasColumnName("RRVATId")
                        .HasColumnType("int");

                    b.Property<int>("SIVATId")
                        .HasColumnName("SIVATId")
                        .HasColumnType("int");

                    b.Property<string>("SKUCode")
                        .IsRequired()
                        .HasColumnName("SKUCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleAccountGroupId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("RRVATId");

                    b.HasIndex("SIVATId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WTAXId");

                    b.ToTable("MstArticleItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("InventoryCode")
                        .IsRequired()
                        .HasColumnName("InventoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.ToTable("MstArticleItemInventory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemPriceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("PriceDescription")
                        .IsRequired()
                        .HasColumnName("PriceDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("MstArticleItemPrice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Multiplier")
                        .HasColumnName("Multiplier")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UnitId");

                    b.ToTable("MstArticleItemUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleType")
                        .IsRequired()
                        .HasColumnName("ArticleType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MstArticleType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnName("Branch")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnName("BranchCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstCompanyBranch");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnName("Company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnName("CompanyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CostMethod")
                        .IsRequired()
                        .HasColumnName("CostMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCompany");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnName("Currency")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCurrency");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstDiscountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnName("Discount")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnName("DiscountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstDiscount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobDepartmentDBset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobDepartment")
                        .IsRequired()
                        .HasColumnName("JobDepartment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobDepartmentCode")
                        .IsRequired()
                        .HasColumnName("JobDepartmentCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeAttachmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentCode")
                        .IsRequired()
                        .HasColumnName("AttachmentCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnName("AttachmentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeAttachment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnName("JobType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobTypeCode")
                        .IsRequired()
                        .HasColumnName("JobTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalNumberOfDays")
                        .HasColumnName("TotalNumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDepartmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobDepartmentId")
                        .HasColumnName("JobDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("JobDepartmentId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeInformationDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InformationCode")
                        .IsRequired()
                        .HasColumnName("InformationCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InformationGroup")
                        .IsRequired()
                        .HasColumnName("InformationGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeInformation");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTaxDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnName("TaxCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxDescription")
                        .IsRequired()
                        .HasColumnName("TaxDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("TaxRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTax");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnName("Term")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TermCode")
                        .IsRequired()
                        .HasColumnName("TermCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTerm");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnName("Unit")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnName("UnitCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnName("Fullname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstUser");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderAttachmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentCode")
                        .IsRequired()
                        .HasColumnName("AttachmentCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnName("AttachmentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentURL")
                        .IsRequired()
                        .HasColumnName("AttachmentURL")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("JOId");

                    b.ToTable("TrnJobOrderAttachment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnName("DateScheduled")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemJobTypeId")
                        .HasColumnName("ItemJobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JODate")
                        .HasColumnName("JODate")
                        .HasColumnType("datetime");

                    b.Property<string>("JONumber")
                        .IsRequired()
                        .HasColumnName("JONumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SIItemId")
                        .HasColumnName("SIItemId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemJobTypeId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SIItemId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnJobOrder");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderInformationDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InformationByUserId")
                        .HasColumnName("InformationByUserId")
                        .HasColumnType("int");

                    b.Property<string>("InformationCode")
                        .IsRequired()
                        .HasColumnName("InformationCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InformationGroup")
                        .IsRequired()
                        .HasColumnName("InformationGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("InformationUpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("InformationByUserId");

                    b.HasIndex("JOId");

                    b.ToTable("TrnJobOrderInformation");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdjustmentAmount")
                        .HasColumnName("AdjustmentAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnName("BalanceAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PaidAmount")
                        .HasColumnName("PaidAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SIDate")
                        .HasColumnName("SIDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SINumber")
                        .IsRequired()
                        .HasColumnName("SINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SoldByUserId")
                        .HasColumnName("SoldByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SoldByUserId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnSalesInvoice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseNetPrice")
                        .HasColumnName("BaseNetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnName("DiscountAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("DiscountId")
                        .HasColumnName("DiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemJobTypeId")
                        .HasColumnName("ItemJobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineTimeStamp")
                        .HasColumnName("LineTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<decimal>("NetPrice")
                        .HasColumnName("NetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("VATId")
                        .HasColumnName("VATId")
                        .HasColumnType("int");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("ItemJobTypeId");

                    b.HasIndex("SIId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VATId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnSalesInvoiceItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccountCashFlows_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccountCashFlows_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccountCategories_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccountCategories_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCashFlowDBSet", "MstAccountCashFlow_AccountCashFlow")
                        .WithMany("MstAccounts_AccountCashFlow")
                        .HasForeignKey("AccountCashFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountTypeDBSet", "MstAccountType_AccountType")
                        .WithMany("MstAccounts_AccountType")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccounts_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccounts_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCategoryDBSet", "MstAccountCategory_AccountCategory")
                        .WithMany("MstAccountTypes_AccountCategory")
                        .HasForeignKey("AccountCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccountTypes_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccountTypes_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccount")
                        .WithMany("MstArticleAccountGroups_AssetAccount")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccount")
                        .WithMany("MstArticleAccountGroups_CostAccount")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstArticleAccountGroups_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccount")
                        .WithMany("MstArticleAccountGroups_ExpenseAccount")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccount")
                        .WithMany("MstArticleAccountGroups_SalesAccount")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstArticleAccountGroups_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleCustomers_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ReceivableAccount")
                        .WithMany("MstArticleCustomers_ReceivableAccount")
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_Term")
                        .WithMany("MstArticleCustomers_Term")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleTypeDBSet", "MstArticleType_ArticleType")
                        .WithMany("MstArticles_ArticleType")
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstArticles_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstArticles_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", "MstArticleAccountGroup_ArticleAccountGroup")
                        .WithMany("MstArticleItems_ArticleAccountGroup")
                        .HasForeignKey("ArticleAccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleItems_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccount")
                        .WithMany("MstArticleItems_AssetAccount")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccount")
                        .WithMany("MstArticleItems_CostAccount")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccount")
                        .WithMany("MstArticleItems_ExpenseAccount")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_RRVAT")
                        .WithMany("MstArticleItemDBSet_RRVAT")
                        .HasForeignKey("RRVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_SIVAT")
                        .WithMany("MstArticleItemDBSet_SIVAT")
                        .HasForeignKey("SIVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccount")
                        .WithMany("MstArticleItems_SalesAccount")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_Unit")
                        .WithMany("MstArticleItems_Unit")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAX")
                        .WithMany("MstArticleItemDBSet_WTAX")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleItemInventories_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("MstArticleItemInventories_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemPriceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleItemPrices_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleItemUnits_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_Unit")
                        .WithMany("MstArticleItemUnits_Unit")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_Company")
                        .WithMany("MstCompanyBranches_Company")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstCompanies_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_Currency")
                        .WithMany("MstCompanies_Currency")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstCompanies_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstCurrencies_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstCurrencies_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstDiscountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstDiscounts_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstDiscounts_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobDepartmentDBset", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstJobDepartments_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstJobDepartments_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeAttachmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobType")
                        .WithMany("MstJobTypeAttachments_JobType")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstJobTypes_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstJobTypes_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDepartmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobDepartmentDBset", "MstJobDepartment_JobDepartment")
                        .WithMany("MstJobTypeDepartments_JobDepartment")
                        .HasForeignKey("JobDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobType")
                        .WithMany("MstJobTypeDepartments_JobType")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeInformationDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobType")
                        .WithMany("MstJobTypeInformations_JobType")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTaxDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstTaxes_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstTaxes_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstTerms_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstTerms_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstUnits_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstUnits_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("MstUsers_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_Company")
                        .WithMany("MstUsers_Company")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderAttachmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JobOrder")
                        .WithMany("TrnJobOrderAttachments_JobOrder")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUser")
                        .WithMany("TrnJobOrders_ApprovedByUser")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("TrnJobOrders_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUser")
                        .WithMany("TrnJobOrders_CheckedByUser")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("TrnJobOrders_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_Currency")
                        .WithMany("TrnJobOrders_Currency")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Item")
                        .WithMany("TrnJobOrders_Item")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_ItemJobType")
                        .WithMany("TrnJobOrders_ItemJobType")
                        .HasForeignKey("ItemJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUser")
                        .WithMany("TrnJobOrders_PreparedByUser")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", "TrnSalesInvoiceItem_SIItem")
                        .WithMany("TrnJobOrders_SIItem")
                        .HasForeignKey("SIItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("TrnJobOrders_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderInformationDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_InformationByUser")
                        .WithMany("TrnJobOrderInformations_InformationByUser")
                        .HasForeignKey("InformationByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JobOrder")
                        .WithMany("TrnJobOrderInformations_JobOrder")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUser")
                        .WithMany("TrnSalesInvoices_ApprovedByUser")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("TrnSalesInvoices_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUser")
                        .WithMany("TrnSalesInvoices_CheckedByUser")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("TrnSalesInvoices_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_Currency")
                        .WithMany("TrnSalesInvoices_Currency")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Customer")
                        .WithMany("TrnSalesInvoices_Customer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUser")
                        .WithMany("TrnSalesInvoices_PreparedByUser")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_SoldByUser")
                        .WithMany("TrnSalesInvoices_SoldByUser")
                        .HasForeignKey("SoldByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_Term")
                        .WithMany("TrnSalesInvoices_Term")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("TrnSalesInvoices_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnit")
                        .WithMany("TrnSalesInvoiceItems_BaseUnit")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstDiscountDBSet", "MstDiscount_Discount")
                        .WithMany("TrnSalesInvoiceItems_Discount")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Item")
                        .WithMany("TrnSalesInvoiceItems_Item")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventory")
                        .WithMany("TrnSalesInvoiceItems_ItemInventory")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_ItemJobType")
                        .WithMany("TrnSalesInvoiceItems_ItemJobType")
                        .HasForeignKey("ItemJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SalesInvoice")
                        .WithMany("TrnSalesInvoiceItems_SalesInvoice")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_Unit")
                        .WithMany("TrnSalesInvoiceItems_Unit")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_VAT")
                        .WithMany("TrnSalesInvoiceItems_VAT")
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAX")
                        .WithMany("TrnSalesInvoiceItems_WTAX")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
