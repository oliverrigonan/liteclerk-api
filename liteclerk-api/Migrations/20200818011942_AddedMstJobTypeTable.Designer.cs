// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using liteclerk_api.DBContext;

namespace liteclerk_api.Migrations
{
    [DbContext(typeof(LiteclerkDBContext))]
    [Migration("20200818011942_AddedMstJobTypeTable")]
    partial class AddedMstJobTypeTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCashFlow")
                        .IsRequired()
                        .HasColumnName("AccountCashFlow")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCashFlowCode")
                        .IsRequired()
                        .HasColumnName("AccountCashFlowCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCashFlow");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCategory")
                        .IsRequired()
                        .HasColumnName("AccountCategory")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCategoryCode")
                        .IsRequired()
                        .HasColumnName("AccountCategoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCategory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("Account")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("AccountCashFlowId")
                        .HasColumnName("AccountCashFlowId")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnName("AccountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnName("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountCashFlowId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategoryId")
                        .HasColumnName("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnName("AccountType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasColumnName("AccountTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleAccountGroup")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleAccountGroupCode")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroupCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AssetAccountId")
                        .HasColumnName("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticleAccountGroup");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("CreditLimit")
                        .HasColumnName("CreditLimit")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnName("Customer")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ReceivableAccountId")
                        .HasColumnName("ReceivableAccountId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("TermId");

                    b.ToTable("MstArticleCustomer");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("Article")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnName("ArticleCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ArticleTypeId")
                        .HasColumnName("ArticleTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticle");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleAccountGroupId")
                        .HasColumnName("ArticleAccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnName("BarCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInventory")
                        .HasColumnName("IsInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJob")
                        .HasColumnName("IsJob")
                        .HasColumnType("bit");

                    b.Property<string>("SKUCode")
                        .IsRequired()
                        .HasColumnName("SKUCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleAccountGroupId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UnitId");

                    b.ToTable("MstArticleItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("InventoryCode")
                        .IsRequired()
                        .HasColumnName("InventoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.ToTable("MstArticleItemInventory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleType")
                        .IsRequired()
                        .HasColumnName("ArticleType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MstArticleType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnName("Branch")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnName("BranchCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstCompanyBranch");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnName("Company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnName("CompanyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CostMethod")
                        .IsRequired()
                        .HasColumnName("CostMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCompany");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnName("Currency")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCurrency");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnName("JobType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobTypeCode")
                        .IsRequired()
                        .HasColumnName("JobTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalNumberOfDays")
                        .HasColumnName("TotalNumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnName("Term")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TermCode")
                        .IsRequired()
                        .HasColumnName("TermCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTerm");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnName("Unit")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnName("UnitCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnName("Fullname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstUser");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdjustmentAmount")
                        .HasColumnName("AdjustmentAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnName("BalanceAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedByDateTime")
                        .HasColumnName("CreatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PaidAmount")
                        .HasColumnName("PaidAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SIDate")
                        .HasColumnName("SIDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SINumber")
                        .IsRequired()
                        .HasColumnName("SINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SoldByUserId")
                        .HasColumnName("SoldByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedByDateTime")
                        .HasColumnName("UpdatedByDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SoldByUserId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnSalesInvoice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccountCashFlows_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccountCashFlows_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccountCategories_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccountCategories_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCashFlowDBSet", "MstAccountCashFlow_AccountCashFlow")
                        .WithMany("MstAccounts_AccountCashFlow")
                        .HasForeignKey("AccountCashFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountTypeDBSet", "MstAccountType_AccountType")
                        .WithMany("MstAccounts_AccountType")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccounts_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccounts_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCategoryDBSet", "MstAccountCategory_AccountCategory")
                        .WithMany("MstAccountTypes_AccountCategory")
                        .HasForeignKey("AccountCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstAccountTypes_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstAccountTypes_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccount")
                        .WithMany("MstArticleAccountGroups_AssetAccount")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccount")
                        .WithMany("MstArticleAccountGroups_CostAccount")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstArticleAccountGroups_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccount")
                        .WithMany("MstArticleAccountGroups_ExpenseAccount")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccount")
                        .WithMany("MstArticleAccountGroups_SalesAccount")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstArticleAccountGroups_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleCustomers_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ReceivableAccount")
                        .WithMany("MstArticleCustomers_ReceivableAccount")
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_Term")
                        .WithMany("MstArticleCustomers_Term")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleTypeDBSet", "MstArticleType_ArticleType")
                        .WithMany("MstArticles_ArticleType")
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstArticles_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstArticles_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", "MstArticleAccountGroup_ArticleAccountGroup")
                        .WithMany("MstArticleItems_ArticleAccountGroup")
                        .HasForeignKey("ArticleAccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleItems_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccount")
                        .WithMany("MstArticleItems_AssetAccount")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccount")
                        .WithMany("MstArticleItems_CostAccount")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccount")
                        .WithMany("MstArticleItems_ExpenseAccount")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccount")
                        .WithMany("MstArticleItems_SalesAccount")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_Unit")
                        .WithMany("MstArticleItems_Unit")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Article")
                        .WithMany("MstArticleItemInventories_Article")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("MstArticleItemInventories_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_Company")
                        .WithMany("MstCompanyBranches_Company")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstCompanies_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_Currency")
                        .WithMany("MstCompanies_Currency")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstCompanies_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstCurrencies_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstCurrencies_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstJobTypes_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstJobTypes_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstTerms_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstTerms_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("MstUnits_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("MstUnits_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("MstUsers_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_Company")
                        .WithMany("MstUsers_Company")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUser")
                        .WithMany("TrnSalesInvoices_ApprovedByUser")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_Branch")
                        .WithMany("TrnSalesInvoices_Branch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUser")
                        .WithMany("TrnSalesInvoices_CheckedByUser")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUser")
                        .WithMany("TrnSalesInvoices_CreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_Currency")
                        .WithMany("TrnSalesInvoices_Currency")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_Customer")
                        .WithMany("TrnSalesInvoices_Customer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUser")
                        .WithMany("TrnSalesInvoices_PreparedByUser")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_SoldByUser")
                        .WithMany("TrnSalesInvoices_SoldByUser")
                        .HasForeignKey("SoldByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_Term")
                        .WithMany("TrnSalesInvoices_Term")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUser")
                        .WithMany("TrnSalesInvoices_UpdatedByUser")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
