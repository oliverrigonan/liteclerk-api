// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using liteclerk_api.DBContext;

namespace liteclerk_api.Migrations
{
    [DbContext(typeof(LiteclerkDBContext))]
    [Migration("20201230141735_AddedJOIdInTrnStockItemTable")]
    partial class AddedJOIdInTrnStockItemTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountArticleTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleTypeId")
                        .HasColumnName("ArticleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleTypeId");

                    b.ToTable("MstAccountArticleType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCashFlow")
                        .IsRequired()
                        .HasColumnName("AccountCashFlow")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCashFlowCode")
                        .IsRequired()
                        .HasColumnName("AccountCashFlowCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCashFlow");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountCategory")
                        .IsRequired()
                        .HasColumnName("AccountCategory")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountCategoryCode")
                        .IsRequired()
                        .HasColumnName("AccountCategoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountCategory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnName("Account")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("AccountCashFlowId")
                        .HasColumnName("AccountCashFlowId")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnName("AccountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnName("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCashFlowId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategoryId")
                        .HasColumnName("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnName("AccountType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasColumnName("AccountTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstAccountType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleAccountGroup")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleAccountGroupCode")
                        .IsRequired()
                        .HasColumnName("ArticleAccountGroupCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AssetAccountId")
                        .HasColumnName("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticleAccountGroup");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleBankDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnName("AccountNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnName("Bank")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CashInBankAccountId")
                        .HasColumnName("CashInBankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TypeOfAccount")
                        .IsRequired()
                        .HasColumnName("TypeOfAccount")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CashInBankAccountId");

                    b.ToTable("MstArticleBank");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("Category")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("CreditLimit")
                        .HasColumnName("CreditLimit")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnName("Customer")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ReceivableAccountId")
                        .HasColumnName("ReceivableAccountId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("TermId");

                    b.ToTable("MstArticleCustomer");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("Article")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnName("ArticleCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ArticleTypeId")
                        .HasColumnName("ArticleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnName("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstArticle");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemComponentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ComponentArticleId")
                        .HasColumnName("ComponentArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ComponentArticleId");

                    b.ToTable("MstArticleItemComponent");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleAccountGroupId")
                        .HasColumnName("ArticleAccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AssetAccountId")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnName("BarCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("Category")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CostAccountId")
                        .HasColumnName("CostAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ExpenseAccountId")
                        .HasColumnName("ExpenseAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInventory")
                        .HasColumnName("IsInventory")
                        .HasColumnType("bit");

                    b.Property<string>("Kitting")
                        .IsRequired()
                        .HasColumnName("Kitting")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("RRVATId")
                        .HasColumnName("RRVATId")
                        .HasColumnType("int");

                    b.Property<int>("SIVATId")
                        .HasColumnName("SIVATId")
                        .HasColumnType("int");

                    b.Property<string>("SKUCode")
                        .IsRequired()
                        .HasColumnName("SKUCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleAccountGroupId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetAccountId");

                    b.HasIndex("CostAccountId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("RRVATId");

                    b.HasIndex("SIVATId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WTAXId");

                    b.ToTable("MstArticleItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("InventoryCode")
                        .IsRequired()
                        .HasColumnName("InventoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.ToTable("MstArticleItemInventory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemPriceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("PriceDescription")
                        .IsRequired()
                        .HasColumnName("PriceDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("MstArticleItemPrice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Multiplier")
                        .HasColumnName("Multiplier")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UnitId");

                    b.ToTable("MstArticleItemUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleOtherDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnName("Other")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("MstArticleOther");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleSupplierDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PayableAccountId")
                        .HasColumnName("PayableAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnName("Supplier")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("TermId");

                    b.ToTable("MstArticleSupplier");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleType")
                        .IsRequired()
                        .HasColumnName("ArticleType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MstArticleType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCodeTableDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("Category")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CodeValue")
                        .IsRequired()
                        .HasColumnName("CodeValue")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("MstCodeTable");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnName("Branch")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnName("BranchCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstCompanyBranch");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnName("Company")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnName("CompanyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CostMethod")
                        .IsRequired()
                        .HasColumnName("CostMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnName("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncomeAccountId")
                        .HasColumnName("IncomeAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnName("TIN")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IncomeAccountId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCompany");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnName("Currency")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstCurrency");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstDiscountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnName("Discount")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnName("DiscountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstDiscount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobDepartmentDBset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobDepartment")
                        .IsRequired()
                        .HasColumnName("JobDepartment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobDepartmentCode")
                        .IsRequired()
                        .HasColumnName("JobDepartmentCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeAttachmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentCode")
                        .IsRequired()
                        .HasColumnName("AttachmentCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnName("AttachmentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeAttachment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnName("JobType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobTypeCode")
                        .IsRequired()
                        .HasColumnName("JobTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalNumberOfDays")
                        .HasColumnName("TotalNumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstJobType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDepartmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRequired")
                        .HasColumnName("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("JobDepartmentId")
                        .HasColumnName("JobDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnName("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobDepartmentId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeInformationDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InformationCode")
                        .IsRequired()
                        .HasColumnName("InformationCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InformationGroup")
                        .IsRequired()
                        .HasColumnName("InformationGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("MstJobTypeInformation");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstPayTypeDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasColumnName("PayType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PayTypeCode")
                        .IsRequired()
                        .HasColumnName("PayTypeCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstPayType");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTaxDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnName("TaxCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TaxDescription")
                        .IsRequired()
                        .HasColumnName("TaxDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("TaxRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTax");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnName("NumberOfDays")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnName("Term")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TermCode")
                        .IsRequired()
                        .HasColumnName("TermCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstTerm");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ManualCode")
                        .IsRequired()
                        .HasColumnName("ManualCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnName("Unit")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnName("UnitCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("MstUnit");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserBranchDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("MstUserBranch");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnName("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnName("Fullname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("MstUser");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserFormDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAdd")
                        .HasColumnName("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCancel")
                        .HasColumnName("CanCancel")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnName("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanLock")
                        .HasColumnName("CanLock")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPrint")
                        .HasColumnName("CanPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUnlock")
                        .HasColumnName("CanUnlock")
                        .HasColumnType("bit");

                    b.Property<int>("FormId")
                        .HasColumnName("FormId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("MstUserForm");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserJobDepartmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobDepartmentId")
                        .HasColumnName("JobDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobDepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("MstUserJobDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysFormDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnName("Form")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SysForm");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysInventoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleItemInventoryId")
                        .HasColumnName("ArticleItemInventoryId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("ILId")
                        .HasColumnName("ILId")
                        .HasColumnType("int");

                    b.Property<int?>("INId")
                        .HasColumnName("INId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InventoryDate")
                        .HasColumnName("InventoryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OTId")
                        .HasColumnName("OTId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("QuantityIn")
                        .HasColumnName("QuantityIn")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("QuantityOut")
                        .HasColumnName("QuantityOut")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("RRId")
                        .HasColumnName("RRId")
                        .HasColumnType("int");

                    b.Property<int?>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int?>("STId")
                        .HasColumnName("STId")
                        .HasColumnType("int");

                    b.Property<int?>("SWId")
                        .HasColumnName("SWId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ArticleItemInventoryId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ILId");

                    b.HasIndex("INId");

                    b.HasIndex("OTId");

                    b.HasIndex("RRId");

                    b.HasIndex("SIId");

                    b.HasIndex("STId");

                    b.HasIndex("SWId");

                    b.ToTable("SysInventory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysJournalEntryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CIId")
                        .HasColumnName("CIId")
                        .HasColumnType("int");

                    b.Property<int?>("CVId")
                        .HasColumnName("CVId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnName("CreditAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnName("DebitAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("ILId")
                        .HasColumnName("ILId")
                        .HasColumnType("int");

                    b.Property<int?>("JVId")
                        .HasColumnName("JVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JournalEntryDate")
                        .HasColumnName("JournalEntryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PMId")
                        .HasColumnName("PMId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RMId")
                        .HasColumnName("RMId")
                        .HasColumnType("int");

                    b.Property<int?>("RRId")
                        .HasColumnName("RRId")
                        .HasColumnType("int");

                    b.Property<int?>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CIId");

                    b.HasIndex("CVId");

                    b.HasIndex("ILId");

                    b.HasIndex("JVId");

                    b.HasIndex("PMId");

                    b.HasIndex("RMId");

                    b.HasIndex("RRId");

                    b.HasIndex("SIId");

                    b.ToTable("SysJournalEntry");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysProductionDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("JODepartmentId")
                        .IsRequired()
                        .HasColumnName("JODepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PNDate")
                        .HasColumnName("PNDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PNNumber")
                        .IsRequired()
                        .HasColumnName("PNNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionTimeStamp")
                        .HasColumnName("ProductionTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("JODepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("SysProduction");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CIDate")
                        .HasColumnName("CIDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CINumber")
                        .IsRequired()
                        .HasColumnName("CINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnCollection");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionLineDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnName("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CIId")
                        .HasColumnName("CIId")
                        .HasColumnType("int");

                    b.Property<string>("CheckBank")
                        .IsRequired()
                        .HasColumnName("CheckBank")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("CheckDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckNumber")
                        .IsRequired()
                        .HasColumnName("CheckNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsClear")
                        .HasColumnName("IsClear")
                        .HasColumnType("bit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayTypeId")
                        .HasColumnName("PayTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXAmount")
                        .HasColumnName("WTAXAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXRate")
                        .HasColumnName("WTAXRate")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CIId");

                    b.HasIndex("PayTypeId");

                    b.HasIndex("SIId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnCollectionLine");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnDisbursementDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnName("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CVDate")
                        .HasColumnName("CVDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CVNumber")
                        .IsRequired()
                        .HasColumnName("CVNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CheckBank")
                        .IsRequired()
                        .HasColumnName("CheckBank")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("CheckDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckNumber")
                        .IsRequired()
                        .HasColumnName("CheckNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClear")
                        .HasColumnName("IsClear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCrossCheck")
                        .HasColumnName("IsCrossCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PayTypeId")
                        .HasColumnName("PayTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Payee")
                        .IsRequired()
                        .HasColumnName("Payee")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PayTypeId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnDisbursement");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnDisbursementLineDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CVId")
                        .HasColumnName("CVId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RRId")
                        .HasColumnName("RRId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXAmount")
                        .HasColumnName("WTAXAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXRate")
                        .HasColumnName("WTAXRate")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CVId");

                    b.HasIndex("RRId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnDisbursementLine");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnInventoryDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ILDate")
                        .HasColumnName("ILDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ILNumber")
                        .IsRequired()
                        .HasColumnName("ILNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Month")
                        .HasColumnName("Month")
                        .HasColumnType("int");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Year")
                        .HasColumnName("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnInventory");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderAttachmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentCode")
                        .IsRequired()
                        .HasColumnName("AttachmentCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnName("AttachmentType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentURL")
                        .IsRequired()
                        .HasColumnName("AttachmentURL")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("JOId");

                    b.ToTable("TrnJobOrderAttachment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnName("DateScheduled")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemJobTypeId")
                        .HasColumnName("ItemJobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JODate")
                        .HasColumnName("JODate")
                        .HasColumnType("datetime");

                    b.Property<string>("JONumber")
                        .IsRequired()
                        .HasColumnName("JONumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int?>("SIItemId")
                        .HasColumnName("SIItemId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemJobTypeId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SIId");

                    b.HasIndex("SIItemId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnJobOrder");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDepartmentDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedToUserId")
                        .HasColumnName("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnName("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<int>("JobDepartmentId")
                        .HasColumnName("JobDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnName("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StatusByUserId")
                        .HasColumnName("StatusByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusUpdatedDateTime")
                        .HasColumnName("StatusUpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("JOId");

                    b.HasIndex("JobDepartmentId");

                    b.HasIndex("StatusByUserId");

                    b.ToTable("TrnJobOrderDepartment");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderInformationDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InformationByUserId")
                        .HasColumnName("InformationByUserId")
                        .HasColumnType("int");

                    b.Property<string>("InformationCode")
                        .IsRequired()
                        .HasColumnName("InformationCode")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InformationGroup")
                        .IsRequired()
                        .HasColumnName("InformationGroup")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("InformationUpdatedDateTime")
                        .HasColumnName("InformationUpdatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<int>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(255);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("InformationByUserId");

                    b.HasIndex("JOId");

                    b.ToTable("TrnJobOrderInformation");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJournalVoucherDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnName("CreditAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnName("DebitAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JVDate")
                        .HasColumnName("JVDate")
                        .HasColumnType("datetime");

                    b.Property<string>("JVNumber")
                        .IsRequired()
                        .HasColumnName("JVNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnJournalVoucher");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJournalVoucherLineDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnName("CreditAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnName("DebitAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("JVId")
                        .HasColumnName("JVId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("JVId");

                    b.ToTable("TrnJournalVoucherLine");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPayableMemoDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PMDate")
                        .HasColumnName("PMDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PMNumber")
                        .IsRequired()
                        .HasColumnName("PMNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnPayableMemo");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPayableMemoLineDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("PMId")
                        .HasColumnName("PMId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RRId")
                        .HasColumnName("RRId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PMId");

                    b.HasIndex("RRId");

                    b.ToTable("TrnPayableMemoLine");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPointOfSaleDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CashierUserCode")
                        .IsRequired()
                        .HasColumnName("CashierUserCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CashierUserId")
                        .HasColumnName("CashierUserId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnName("CustomerCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnName("Discount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetPrice")
                        .HasColumnName("NetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnName("OrderNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("POSDate")
                        .HasColumnName("POSDate")
                        .HasColumnType("datetime");

                    b.Property<string>("POSNumber")
                        .IsRequired()
                        .HasColumnName("POSNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnName("PostCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnName("TaxAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnName("TaxCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("TaxId")
                        .HasColumnName("TaxId")
                        .HasColumnType("int");

                    b.Property<string>("TerminalCode")
                        .IsRequired()
                        .HasColumnName("TerminalCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnName("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CashierUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("TaxId");

                    b.ToTable("TrnPointOfSale");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseOrderDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PODate")
                        .HasColumnName("PODate")
                        .HasColumnType("datetime");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasColumnName("PONumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PRId")
                        .HasColumnName("PRId")
                        .HasColumnType("int");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnName("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PRId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnPurchaseOrder");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseOrderItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("POId")
                        .HasColumnName("POId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("ItemId");

                    b.HasIndex("POId");

                    b.HasIndex("UnitId");

                    b.ToTable("TrnPurchaseOrderItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseRequestDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PRDate")
                        .HasColumnName("PRDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PRNumber")
                        .IsRequired()
                        .HasColumnName("PRNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnName("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnPurchaseRequest");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseRequestItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PRId")
                        .HasColumnName("PRId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PRId");

                    b.HasIndex("UnitId");

                    b.ToTable("TrnPurchaseRequestItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivableMemoDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RMDate")
                        .HasColumnName("RMDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RMNumber")
                        .IsRequired()
                        .HasColumnName("RMNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnReceivableMemo");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivableMemoLineDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RMId")
                        .HasColumnName("RMId")
                        .HasColumnType("int");

                    b.Property<int>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RMId");

                    b.HasIndex("SIId");

                    b.ToTable("TrnReceivableMemoLine");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdjustmentAmount")
                        .HasColumnName("AdjustmentAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnName("BalanceAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PaidAmount")
                        .HasColumnName("PaidAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RRDate")
                        .HasColumnName("RRDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RRNumber")
                        .IsRequired()
                        .HasColumnName("RRNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ReceivedByUserId")
                        .HasColumnName("ReceivedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("ReceivedByUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnReceivingReceipt");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivingReceiptItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("POId")
                        .HasColumnName("POId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("RRId")
                        .HasColumnName("RRId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("VATAmount")
                        .HasColumnName("VATAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("VATId")
                        .HasColumnName("VATId")
                        .HasColumnType("int");

                    b.Property<decimal>("VATRate")
                        .HasColumnName("VATRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("WTAXAmount")
                        .HasColumnName("WTAXAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXRate")
                        .HasColumnName("WTAXRate")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ItemId");

                    b.HasIndex("POId");

                    b.HasIndex("RRId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VATId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnReceivingReceiptItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdjustmentAmount")
                        .HasColumnName("AdjustmentAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnName("BalanceAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PaidAmount")
                        .HasColumnName("PaidAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SIDate")
                        .HasColumnName("SIDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SINumber")
                        .IsRequired()
                        .HasColumnName("SINumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SoldByUserId")
                        .HasColumnName("SoldByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SoldByUserId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnSalesInvoice");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseNetPrice")
                        .HasColumnName("BaseNetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnName("DiscountAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("DiscountId")
                        .HasColumnName("DiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemJobTypeId")
                        .HasColumnName("ItemJobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineTimeStamp")
                        .HasColumnName("LineTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<decimal>("NetPrice")
                        .HasColumnName("NetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("VATAmount")
                        .HasColumnName("VATAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("VATId")
                        .HasColumnName("VATId")
                        .HasColumnType("int");

                    b.Property<decimal>("VATRate")
                        .HasColumnName("VATRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("WTAXAmount")
                        .HasColumnName("WTAXAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXRate")
                        .HasColumnName("WTAXRate")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("ItemJobTypeId");

                    b.HasIndex("SIId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VATId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnSalesInvoiceItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesOrderDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnName("DateNeeded")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SODate")
                        .HasColumnName("SODate")
                        .HasColumnType("datetime");

                    b.Property<string>("SONumber")
                        .IsRequired()
                        .HasColumnName("SONumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SoldByUserId")
                        .HasColumnName("SoldByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TermId")
                        .HasColumnName("TermId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("SoldByUserId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnSalesOrder");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesOrderItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseNetPrice")
                        .HasColumnName("BaseNetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnName("DiscountAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("DiscountId")
                        .HasColumnName("DiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LineTimeStamp")
                        .HasColumnName("LineTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<decimal>("NetPrice")
                        .HasColumnName("NetPrice")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SOId")
                        .HasColumnName("SOId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("VATAmount")
                        .HasColumnName("VATAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("VATId")
                        .HasColumnName("VATId")
                        .HasColumnType("int");

                    b.Property<decimal>("VATRate")
                        .HasColumnName("VATRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("WTAXAmount")
                        .HasColumnName("WTAXAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("WTAXId")
                        .HasColumnName("WTAXId")
                        .HasColumnType("int");

                    b.Property<decimal>("WTAXRate")
                        .HasColumnName("WTAXRate")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("SOId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VATId");

                    b.HasIndex("WTAXId");

                    b.ToTable("TrnSalesOrderItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockCountDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SCDate")
                        .HasColumnName("SCDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SCNumber")
                        .IsRequired()
                        .HasColumnName("SCNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnStockCount");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockCountItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SCId")
                        .HasColumnName("SCId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SCId");

                    b.ToTable("TrnStockCountItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockInDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("INDate")
                        .HasColumnName("INDate")
                        .HasColumnType("datetime");

                    b.Property<string>("INNumber")
                        .IsRequired()
                        .HasColumnName("INNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnStockIn");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockInItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("INId")
                        .HasColumnName("INId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("JOId")
                        .HasColumnName("JOId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("INId");

                    b.HasIndex("ItemId");

                    b.HasIndex("JOId");

                    b.HasIndex("UnitId");

                    b.ToTable("TrnStockInItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockOutDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OTDate")
                        .HasColumnName("OTDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OTNumber")
                        .IsRequired()
                        .HasColumnName("OTNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnStockOut");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockOutItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<int>("OTId")
                        .HasColumnName("OTId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("OTId");

                    b.HasIndex("UnitId");

                    b.ToTable("TrnStockOutItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockTransferDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("STDate")
                        .HasColumnName("STDate")
                        .HasColumnType("datetime");

                    b.Property<string>("STNumber")
                        .IsRequired()
                        .HasColumnName("STNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ToBranchId")
                        .HasColumnName("ToBranchId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("ToBranchId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnStockTransfer");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockTransferItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("STId")
                        .HasColumnName("STId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("STId");

                    b.HasIndex("UnitId");

                    b.ToTable("TrnStockTransferItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockWithdrawalDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnName("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnName("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("ContactNumber")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnName("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReference")
                        .IsRequired()
                        .HasColumnName("DocumentReference")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FromBranchId")
                        .HasColumnName("FromBranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrinted")
                        .HasColumnName("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<string>("ManualNumber")
                        .IsRequired()
                        .HasColumnName("ManualNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PreparedByUserId")
                        .HasColumnName("PreparedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedByUserId")
                        .HasColumnName("ReceivedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnName("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SIId")
                        .HasColumnName("SIId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SWDate")
                        .HasColumnName("SWDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SWNumber")
                        .IsRequired()
                        .HasColumnName("SWNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnName("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnName("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromBranchId");

                    b.HasIndex("PreparedByUserId");

                    b.HasIndex("ReceivedByUserId");

                    b.HasIndex("SIId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TrnStockWithdrawal");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockWithdrawalItemDBSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseCost")
                        .HasColumnName("BaseCost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("BaseQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemInventoryId")
                        .HasColumnName("ItemInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnName("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SWId")
                        .HasColumnName("SWId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemInventoryId");

                    b.HasIndex("SWId");

                    b.HasIndex("UnitId");

                    b.ToTable("TrnStockWithdrawalItem");
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountArticleTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("MstAccountArticleTypes_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleTypeDBSet", "MstArticleType_ArticleTypeId")
                        .WithMany("MstAccountArticleTypes_ArticleTypeId")
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCashFlowDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccountCashFlows_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccountCashFlows_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountCategoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccountCategories_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccountCategories_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCashFlowDBSet", "MstAccountCashFlow_AccountCashFlowId")
                        .WithMany("MstAccounts_AccountCashFlowId")
                        .HasForeignKey("AccountCashFlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountTypeDBSet", "MstAccountType_AccountTypeId")
                        .WithMany("MstAccounts_AccountTypeId")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccounts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccounts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstAccountTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountCategoryDBSet", "MstAccountCategory_AccountCategoryId")
                        .WithMany("MstAccountTypes_AccountCategoryId")
                        .HasForeignKey("AccountCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstAccountTypes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstAccountTypes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccountId")
                        .WithMany("MstArticleAccountGroups_AssetAccountId")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccountId")
                        .WithMany("MstArticleAccountGroups_CostAccountId")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstArticleAccountGroups_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccountId")
                        .WithMany("MstArticleAccountGroups_ExpenseAccountId")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccountId")
                        .WithMany("MstArticleAccountGroups_SalesAccountId")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstArticleAccountGroups_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleBankDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleBanks_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CashInBankAccountId")
                        .WithMany("MstArticleBanks_CashInBankAccountId")
                        .HasForeignKey("CashInBankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleCustomerDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleCustomers_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ReceivableAccountId")
                        .WithMany("MstArticleCustomers_ReceivableAccountId")
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("MstArticleCustomers_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleTypeDBSet", "MstArticleType_ArticleTypeId")
                        .WithMany("MstArticles_ArticleTypeId")
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstArticles_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstArticles_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemComponentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemComponents_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ComponentArticleId")
                        .WithMany("MstArticleItemComponents_ComponentArticleId")
                        .HasForeignKey("ComponentArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleAccountGroupDBSet", "MstArticleAccountGroup_ArticleAccountGroupId")
                        .WithMany("MstArticleItems_ArticleAccountGroupId")
                        .HasForeignKey("ArticleAccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItems_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AssetAccountId")
                        .WithMany("MstArticleItems_AssetAccountId")
                        .HasForeignKey("AssetAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_CostAccountId")
                        .WithMany("MstArticleItems_CostAccountId")
                        .HasForeignKey("CostAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_ExpenseAccountId")
                        .WithMany("MstArticleItems_ExpenseAccountId")
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_RRVATId")
                        .WithMany("MstArticleItems_RRVATId")
                        .HasForeignKey("RRVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_SIVATId")
                        .WithMany("MstArticleItems_SIVATId")
                        .HasForeignKey("SIVATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_SalesAccountId")
                        .WithMany("MstArticleItems_SalesAccountId")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("MstArticleItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("MstArticleItems_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemInventories_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("MstArticleItemInventories_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemPriceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemPrices_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleItemUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleItemUnits_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("MstArticleItemUnits_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleOtherDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleOthers_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstArticleSupplierDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("MstArticleSuppliers_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_PayableAccountId")
                        .WithMany("MstArticleSuppliers_PayableAccountId")
                        .HasForeignKey("PayableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("MstArticleSuppliers_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyBranchDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_CompanyId")
                        .WithMany("MstCompanyBranches_CompanyId")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCompanyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstCompanies_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("MstCompanies_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_IncomeAccountId")
                        .WithMany("MstCompanies_IncomeAccountId")
                        .HasForeignKey("IncomeAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstCompanies_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstCurrencyDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstCurrencies_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstCurrencies_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstDiscountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstDiscounts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstDiscounts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobDepartmentDBset", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstJobDepartments_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstJobDepartments_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeAttachmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobTypeId")
                        .WithMany("MstJobTypeAttachments_JobTypeId")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstJobTypes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstJobTypes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeDepartmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobDepartmentDBset", "MstJobDepartment_JobDepartmentId")
                        .WithMany("MstJobTypeDepartments_JobDepartmentId")
                        .HasForeignKey("JobDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobTypeId")
                        .WithMany("MstJobTypeDepartments_JobTypeId")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstJobTypeInformationDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_JobTypeId")
                        .WithMany("MstJobTypeInformations_JobTypeId")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstPayTypeDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("MstPayTypes_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstPayTypes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstPayTypes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTaxDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("MstTaxes_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstTaxes_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstTaxes_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstTermDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstTerms_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstTerms_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUnitDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("MstUnits_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("MstUnits_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserBranchDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("MstUserBranches_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UserId")
                        .WithMany("MstUserBranches_UserId")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("MstUsers_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstCompanyDBSet", "MstCompany_CompanyId")
                        .WithMany("MstUsers_CompanyId")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserFormDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.SysFormDBSet", "SysForm_FormId")
                        .WithMany("MstUserForms_FormId")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UserId")
                        .WithMany("MstUserForms_UserId")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.MstUserJobDepartmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstJobDepartmentDBset", "MstJobDepartment_JobDepartmentId")
                        .WithMany("MstUserJobDepartments_JobDepartmentId")
                        .HasForeignKey("JobDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UserId")
                        .WithMany("MstUserJobDepartments_UserId")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysInventoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("SysInventories_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("SysInventories_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ArticleItemInventoryId")
                        .WithMany("SysInventories_ArticleItemInventoryId")
                        .HasForeignKey("ArticleItemInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("SysInventories_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnInventoryDBSet", "TrnInventory_ILId")
                        .WithMany("SysInventories_ILId")
                        .HasForeignKey("ILId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnStockInDBSet", "TrnStockIn_INId")
                        .WithMany("SysInventories_INId")
                        .HasForeignKey("INId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnStockOutDBSet", "TrnStockOut_OTId")
                        .WithMany("SysInventories_OTId")
                        .HasForeignKey("OTId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", "TrnReceivingReceipt_RRId")
                        .WithMany("SysInventories_RRId")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("SysInventories_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnStockTransferDBSet", "TrnStockTransfer_STId")
                        .WithMany("SysInventories_STId")
                        .HasForeignKey("STId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnStockWithdrawalDBSet", "TrnStockWithdrawal_SWId")
                        .WithMany("SysInventories_SWId")
                        .HasForeignKey("SWId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysJournalEntryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("SysJournalEntries_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("SysJournalEntries_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("SysJournalEntries_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnCollectionDBSet", "TrnCollection_CIId")
                        .WithMany("SysJournalEntries_CIId")
                        .HasForeignKey("CIId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnDisbursementDBSet", "TrnDisbursement_CVId")
                        .WithMany("SysJournalEntries_CVId")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnInventoryDBSet", "TrnInventory_ILId")
                        .WithMany("SysJournalEntries_ILId")
                        .HasForeignKey("ILId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnJournalVoucherDBSet", "TrnJournalVoucher_JVId")
                        .WithMany("SysJournalEntries_JVId")
                        .HasForeignKey("JVId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnPayableMemoDBSet", "TrnPayableMemo_PMId")
                        .WithMany("SysJournalEntries_PMId")
                        .HasForeignKey("PMId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnReceivableMemoDBSet", "TrnReceivableMemo_RMId")
                        .WithMany("SysJournalEntries_RMId")
                        .HasForeignKey("RMId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", "TrnReceivingReceipt_RRId")
                        .WithMany("SysJournalEntries_RRId")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("SysJournalEntries_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("liteclerk_api.DBSets.SysProductionDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("SysProductions_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDepartmentDBSet", "TrnJobOrderDepartment_JODepartmentId")
                        .WithMany("SysProductions_JODepartmentId")
                        .HasForeignKey("JODepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UserId")
                        .WithMany("SysProductions_UserId")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnCollections_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnCollections_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnCollections_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnCollections_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnCollections_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnCollections_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnCollections_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnCollections_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnCollectionLineDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnCollectionLines_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnCollectionLines_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_BankId")
                        .WithMany("TrnCollectionLines_BankId")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnCollectionLines_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnCollectionDBSet", "TrnCollection_CIId")
                        .WithMany("TrnCollectionLines_CIId")
                        .HasForeignKey("CIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstPayTypeDBSet", "MstPayType_PayTypeId")
                        .WithMany("TrnCollectionLines_PayTypeId")
                        .HasForeignKey("PayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnCollectionLines_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnCollectionLines_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnDisbursementDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnDisbursements_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_BankId")
                        .WithMany("TrnDisbursements_BankId")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnDisbursements_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnDisbursements_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnDisbursements_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnDisbursements_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstPayTypeDBSet", "MstPayType_PayTypeId")
                        .WithMany("TrnDisbursements_PayTypeId")
                        .HasForeignKey("PayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnDisbursements_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_SupplierId")
                        .WithMany("TrnDisbursements_SupplierId")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnDisbursements_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnDisbursementLineDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnDisbursementLines_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnDisbursementLines_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnDisbursementLines_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnDisbursementDBSet", "TrnDisbursement_CVId")
                        .WithMany("TrnDisbursementLines_CVId")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", "TrnReceivingReceipt_RRId")
                        .WithMany("TrnDisbursementLines_RRId")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnDisbursementLines_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnInventoryDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnInventories_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnInventories_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnInventories_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnInventories_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnInventories_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnInventories_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnInventories_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderAttachmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnJobOrderAttachments_JOId")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnJobOrders_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnJobOrders_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnJobOrders_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnJobOrders_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnJobOrders_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnJobOrders_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnJobOrders_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_ItemJobTypeId")
                        .WithMany("TrnJobOrders_ItemJobTypeId")
                        .HasForeignKey("ItemJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnJobOrders_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnJobOrders_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", "TrnSalesInvoiceItem_SIItemId")
                        .WithMany("TrnJobOrders_SIIdItem")
                        .HasForeignKey("SIItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnJobOrders_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnJobOrders_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderDepartmentDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_AssignedToUserId")
                        .WithMany("TrnJobOrderDepartments_AssignedToUserId")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnJobOrderDepartments_JOId")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstJobDepartmentDBset", "MstJobDepartment_JobDepartmentId")
                        .WithMany("TrnJobOrderDepartments_JobDepartmentId")
                        .HasForeignKey("JobDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_StatusByUserId")
                        .WithMany("TrnJobOrderDepartments_StatusByUserId")
                        .HasForeignKey("StatusByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJobOrderInformationDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_InformationByUserId")
                        .WithMany("TrnJobOrderInformations_InformationByUserId")
                        .HasForeignKey("InformationByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnJobOrderInformations_JOId")
                        .HasForeignKey("JOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJournalVoucherDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnJournalVouchers_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnJournalVouchers_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnJournalVouchers_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnJournalVouchers_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnJournalVouchers_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnJournalVouchers_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnJournalVouchers_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnJournalVoucherLineDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnJournalVoucherLines_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnJournalVoucherLines_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnJournalVoucherLines_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJournalVoucherDBSet", "TrnJournalVoucher_JVId")
                        .WithMany("TrnJournalVoucherLines_JVId")
                        .HasForeignKey("JVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPayableMemoDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnPayableMemos_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnPayableMemos_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnPayableMemos_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnPayableMemos_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnPayableMemos_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnPayableMemos_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_SupplierId")
                        .WithMany("TrnPayableMemos_SupplierId")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnPayableMemos_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPayableMemoLineDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnPayableMemoLines_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnPayableMemoLines_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnPayableMemoLines_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnPayableMemoDBSet", "TrnPayableMemo_PMId")
                        .WithMany("TrnPayableMemoLines_PMId")
                        .HasForeignKey("PMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", "TrnReceivingReceipt_RRId")
                        .WithMany("TrnPayableMemoLines_RRId")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPointOfSaleDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnPointOfSales_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CashierUserId")
                        .WithMany("TrnPointOfSales_CashierUserId")
                        .HasForeignKey("CashierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnPointOfSales_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnPointOfSales_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_TaxId")
                        .WithMany("TrnPointOfSales_TaxId")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseOrderDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnPurchaseOrders_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnPurchaseOrders_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnPurchaseOrders_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnPurchaseOrders_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnPurchaseOrders_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnPurchaseRequestDBSet", "TrnPurchaseRequest_PRId")
                        .WithMany("TrnPurchaseOrders_PRId")
                        .HasForeignKey("PRId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnPurchaseOrders_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_RequestedByUserId")
                        .WithMany("TrnPurchaseOrders_RequestedByUserId")
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_SupplierId")
                        .WithMany("TrnPurchaseOrders_SupplierId")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("TrnPurchaseOrders_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnPurchaseOrders_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseOrderItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnPurchaseOrderItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnPurchaseOrderItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnPurchaseOrderDBSet", "TrnPurchaseOrder_POId")
                        .WithMany("TrnPurchaseOrderItems_POId")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnPurchaseOrderItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseRequestDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnPurchaseRequests_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnPurchaseRequests_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnPurchaseRequests_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnPurchaseRequests_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnPurchaseRequests_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnPurchaseRequests_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_RequestedByUserId")
                        .WithMany("TrnPurchaseRequests_RequestedByUserId")
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_SupplierId")
                        .WithMany("TrnPurchaseRequests_SupplierId")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("TrnPurchaseRequests_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnPurchaseRequests_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnPurchaseRequestItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnPurchaseRequestItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnPurchaseRequestItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnPurchaseRequestDBSet", "TrnPurchaseRequest_PRId")
                        .WithMany("TrnPurchaseRequestItems_PRId")
                        .HasForeignKey("PRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnPurchaseRequestItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivableMemoDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnReceivableMemos_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnReceivableMemos_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnReceivableMemos_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnReceivableMemos_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnReceivableMemos_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnReceivableMemos_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnReceivableMemos_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnReceivableMemos_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivableMemoLineDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnReceivableMemoLines_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnReceivableMemoLines_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnReceivableMemoLines_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnReceivableMemoDBSet", "TrnReceivableMemo_RMId")
                        .WithMany("TrnReceivableMemoLines_RMId")
                        .HasForeignKey("RMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnReceivableMemoLines_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnReceivingReceipts_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnReceivingReceipts_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnReceivingReceipts_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnReceivingReceipts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnReceivingReceipts_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnReceivingReceipts_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ReceivedByUserId")
                        .WithMany("TrnReceivingReceipts_ReceivedByUserId")
                        .HasForeignKey("ReceivedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_SupplierId")
                        .WithMany("TrnReceivingReceipts_SupplierId")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("TrnReceivingReceipts_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnReceivingReceipts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnReceivingReceiptItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnReceivingReceiptItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnReceivingReceiptItems_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnReceivingReceiptItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnPurchaseOrderDBSet", "TrnPurchaseOrder_POId")
                        .WithMany("TrnReceivingReceiptItems_POId")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnReceivingReceiptDBSet", "TrnReceivingReceipt_RRId")
                        .WithMany("TrnReceivingReceiptItems_RRId")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnReceivingReceiptItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_VATId")
                        .WithMany("TrnReceivingReceiptItems_VATId")
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnReceivingReceiptItems_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnSalesInvoices_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnSalesInvoices_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnSalesInvoices_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnSalesInvoices_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnSalesInvoices_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnSalesInvoices_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnSalesInvoices_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_SoldByUserId")
                        .WithMany("TrnSalesInvoices_SoldByUserId")
                        .HasForeignKey("SoldByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("TrnSalesInvoices_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnSalesInvoices_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesInvoiceItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnSalesInvoiceItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstDiscountDBSet", "MstDiscount_DiscountId")
                        .WithMany("TrnSalesInvoiceItems_DiscountId")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnSalesInvoiceItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventoryId")
                        .WithMany("TrnSalesInvoiceItems_ItemInventoryId")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.MstJobTypeDBSet", "MstJobType_ItemJobTypeId")
                        .WithMany("TrnSalesInvoiceItems_ItemJobTypeId")
                        .HasForeignKey("ItemJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnSalesInvoiceItems_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnSalesInvoiceItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_VATId")
                        .WithMany("TrnSalesInvoiceItems_VATId")
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnSalesInvoiceItems_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesOrderDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnSalesOrders_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnSalesOrders_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnSalesOrders_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnSalesOrders_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnSalesOrders_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnSalesOrders_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnSalesOrders_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_SoldByUserId")
                        .WithMany("TrnSalesOrders_SoldByUserId")
                        .HasForeignKey("SoldByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTermDBSet", "MstTerm_TermId")
                        .WithMany("TrnSalesOrders_TermId")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnSalesOrders_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnSalesOrderItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnSalesOrderItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstDiscountDBSet", "MstDiscount_DiscountId")
                        .WithMany("TrnSalesOrderItems_DiscountId")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnSalesOrderItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventoryId")
                        .WithMany("TrnSalesOrderItems_ItemInventoryId")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("liteclerk_api.DBSets.TrnSalesOrderDBSet", "TrnSalesOrder_SOId")
                        .WithMany("TrnSalesOrderItems_SOId")
                        .HasForeignKey("SOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnSalesOrderItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_VATId")
                        .WithMany("TrnSalesOrderItems_VATId")
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstTaxDBSet", "MstTax_WTAXId")
                        .WithMany("TrnSalesOrderItems_WTAXId")
                        .HasForeignKey("WTAXId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockCountDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnStockCounts_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnStockCounts_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnStockCounts_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnStockCounts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnStockCounts_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnStockCounts_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnStockCounts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockCountItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnStockCountItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnStockCountDBSet", "TrnStockCount_SCId")
                        .WithMany("TrnStockCountItems_SCId")
                        .HasForeignKey("SCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockInDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnStockIns_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnStockIns_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnStockIns_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnStockIns_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnStockIns_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnStockIns_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnStockIns_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnStockIns_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnStockIns_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockInItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnStockInItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnStockInDBSet", "TrnStockIn_INId")
                        .WithMany("TrnStockInItems_INId")
                        .HasForeignKey("INId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnStockInItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnJobOrderDBSet", "TrnJobOrder_JOId")
                        .WithMany("TrnStockInItems_JOId")
                        .HasForeignKey("JOId");

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnStockInItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockOutDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnStockOuts_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnStockOuts_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnStockOuts_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnStockOuts_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnStockOuts_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnStockOuts_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnStockOuts_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnStockOuts_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnStockOuts_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockOutItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnStockOutItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnStockOutItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventoryId")
                        .WithMany("TrnStockOutItems_ItemInventoryId")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnStockOutDBSet", "TrnStockOut_OTId")
                        .WithMany("TrnStockOutItems_OTId")
                        .HasForeignKey("OTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnStockOutItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockTransferDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstAccountDBSet", "MstAccount_AccountId")
                        .WithMany("TrnStockTransfers_AccountId")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnStockTransfers_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ArticleId")
                        .WithMany("TrnStockTransfers_ArticleId")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnStockTransfers_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnStockTransfers_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnStockTransfers_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnStockTransfers_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnStockTransfers_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_ToBranchId")
                        .WithMany("TrnStockTransfers_ToBranchId")
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnStockTransfers_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockTransferItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnStockTransferItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnStockTransferItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventoryId")
                        .WithMany("TrnStockTransferItems_ItemInventoryId")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnStockTransferDBSet", "TrnStockTransfer_STId")
                        .WithMany("TrnStockTransferItems_STId")
                        .HasForeignKey("STId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnStockTransferItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockWithdrawalDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ApprovedByUserId")
                        .WithMany("TrnStockWithdrawals_ApprovedByUserId")
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_BranchId")
                        .WithMany("TrnStockWithdrawals_BranchId")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CheckedByUserId")
                        .WithMany("TrnStockWithdrawals_CheckedByUserId")
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_CreatedByUserId")
                        .WithMany("TrnStockWithdrawals_CreatedByUserId")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCurrencyDBSet", "MstCurrency_CurrencyId")
                        .WithMany("TrnStockWithdrawals_CurrencyId")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_CustomerId")
                        .WithMany("TrnStockWithdrawals_CustomerId")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstCompanyBranchDBSet", "MstCompanyBranch_FromBranchId")
                        .WithMany("TrnStockWithdrawals_FromBranchId")
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_PreparedByUserId")
                        .WithMany("TrnStockWithdrawals_PreparedByUserId")
                        .HasForeignKey("PreparedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_ReceivedByUserId")
                        .WithMany("TrnStockWithdrawals_ReceivedByUserId")
                        .HasForeignKey("ReceivedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnSalesInvoiceDBSet", "TrnSalesInvoice_SIId")
                        .WithMany("TrnStockWithdrawals_SIId")
                        .HasForeignKey("SIId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUserDBSet", "MstUser_UpdatedByUserId")
                        .WithMany("TrnStockWithdrawals_UpdatedByUserId")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("liteclerk_api.DBSets.TrnStockWithdrawalItemDBSet", b =>
                {
                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_BaseUnitId")
                        .WithMany("TrnStockWithdrawalItems_BaseUnitId")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleDBSet", "MstArticle_ItemId")
                        .WithMany("TrnStockWithdrawalItems_ItemId")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstArticleItemInventoryDBSet", "MstArticleItemInventory_ItemInventoryId")
                        .WithMany("TrnStockWithdrawalItems_ItemInventoryId")
                        .HasForeignKey("ItemInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.TrnStockWithdrawalDBSet", "TrnStockWithdrawal_SWId")
                        .WithMany("TrnStockWithdrawalItems_SWId")
                        .HasForeignKey("SWId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("liteclerk_api.DBSets.MstUnitDBSet", "MstUnit_UnitId")
                        .WithMany("TrnStockWithdrawalItems_UnitId")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
